1) Анализ работы программы парсер вакансий
2) Анализ был проведен с помощью утилит jconsole и jmap. Jmap в Ubuntu 18.04 запускался
командой sudo jhsdb jmap --pid (pid процесса) --heap. Если не использовать запуск от имени суперпользователя
jmap не запускается.
Кратко о функционировании приложения парсер вакансий и о режиме его работы.
В парсере используется библиотека Quartz. Для анализа работы парсера я 
задал режим запуска приложеня - каждые две минуты. Те каждые две минуты
в отдельном потоке будет запускаться задача определенная в переопределенном методе
execute. Парсер анализирует данные по вакансиям java программистов с сайта sql.exe
и сохраняет их в базу, если дата найденной вакансии на сайте - позже максимальной даты
в базе. Для анализа работы -я почистил базу данных. Из анализа графиков NormalFunctioning1.png
и NormalFunctioning2.png можно сделать следующие выводы:
а) Максимальный объём загрузки CPU достигает 15% - в первый запуск нашей задачи в отдельном потоке
(поскольку данных в базе еще нет - мы парсим все вакансии на сайте с 1 января 2019 года и сохраняем их в базу, что активно
расходует ресурсы процессора). При следующих запусках нашей задачи в отдельном потоке - ресурсы CPU расходуются незначительно,
поскольку не выполняем значительных вычислений. 
б) Максимальный объём используемой памяти достигает 30 мб. Происходит это в момент первого запуска нашей задачи в отдельном
потоке, поскольку в этот момент создаётся большая коллекция из вакансий для последующего сохранения их в базу.
График памяти - имеет переодический вид, что очевидно - наша задача запускается с переодичностью каждые две минуты в отдельном потоке.
Ссылке на объекты в куче создаются в стеке этого потока. Когда поток завершает свою работу, объекты в куче становятся недостижимыми и 
уничтожаются сборщиком мусора. Память освобождается
в) Графки количества существующих потоков также имеет пилообразный характер. Что объясняется переодичностью запуска нашей задачи в отдельном потоке
г) За время работы приложения сборщик мусора вызывался 13 раз. Сборка мусора производилась в young generation
3) Чтобы добиться состояние выхода за пределы памяти - парсер был запущен с ключами -Xms2m (начальнй объём памяти 2 м) -Xmx11m (максимальный доступный объём доступной памяти 11 м)
Из анализа графиков failure1.png и failure2.png видно, что объём расходуемой памяти доходит до 11 мб и приложение валится с OutOfMemoryException.
При этом - максимальный объём загрузки CPU достигает 15%, что вызвано тем, что приложение пытается выполнить свою задачу и активно работает GG.
Что подтверждается дополнительно данными с рисунка failure2.png. К моменту окончания работы приложения - было выполнено 66 сборок в young generation
и 12 сборок в OldGeneration. Объем использования heap достиг 75%, no-heap 25%


